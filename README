The BOX Archiver
================

The BOX archive is a new archive format developed by Albert Tomanek to replace the ageing TAR format.
It makes use of an XML file header to store the its file hierarchy,
and therefore the metadata about any file in the archive can be obtained without having to read the whole file.
This is a major advantage over the TAR format.

File data is stored concatenated following the XML header,
and the start and size of each file is stored in the 'start' and 'size' attributes
of the corresponding node in the XML header.
For the full format specification and examples, see the 'doc/' directory.

The BoxArchive library is licensed under the LGPL
and can therefore be used in closed-source projects.

(For a tutorial see doc/tutorial.txt)

FAQ
===
Q: Why are the unit tests in C++?
A: I plan to use the box archiver in a larger project written in C++ (with tests in C++)
   so using the same test framework makes sense. Also, I was already familliar with 
   unittest-cpp and didn't want to have to learn a new framework. Don't worry though --
   the library itself is still plain C :)

CONTRIBUTING
============
If you want to learn about how the BoxArchive library works,
or want to develop it/contribute code, have a look at 'doc/howitworks.txt'.
You should also look at the source code, which is well-documented in most places.

COMING SOON
===========
The following features are planned for future
versions of the BoxArchive library:
 - Tests
 - Unix file permissions
 - Overflow directory for large files when overwriting source archive.
 - File synchronisation (like Windows briefcase files)
 - Soft links
 - Per-file compression using Google Snappy [https://github.com/google/snappy]

THANKS
======
Thanks to Aaron Voisine <aaron@voisine.org> for writing the MIT licensed EzXML parser,
which I have used in the BoxArchive library to compose and parse the XML headers.

Thanks to Zed Shaw for providing 'dbg.h' in his book 'Learn C the Hard Way',
which I have used to detect errors.

COMPILING
=========
The BoxArchive library aims to be portable,
and so only requires the C standard library to compile.
All platform-dependent functions have wrappers.
If porting the BoxArchive library, the only files that need adding to are byteorder.c and filesystem.c.

To compile:
make

To install:
sudo make install

To uninstall:
sudo make uninstall

TESTING
=======
Tests are written using unittest-cpp (see FAQ) and HippoMocks,
so you will need a C++ compiler and those installed for the tests to compile.

To compile and run the tests:
make tests

The previously mentioned projects can be obtained at:
	[https://github.com/unittest-cpp/unittest-cpp.git]
	[https://github.com/dascandy/hippomocks.git]

FILES
=====
doc/BoxArchive			-  A text file depicting the structure of the BoxArchive, ba_Entry, and ba_File structs in memory.
doc/format.txt			-  The specification for the BOX format.
doc/howitworks.txt		-  An in-depth description of how the BoxArchive library works for anyone willing to contribute.
doc/tutorial.txt		-  A tutorial on how to use the BoxArchive library
box_archive.c			\_
box_archive.h			/  The main file of the box archive library and its header
byteorder.c			\_
byteorder.h			/  Architecture-independent functions for dealing with byte-order.
dbg.h				-  Definition of the check() and log_err() macros, used in many places.
dupcat.c			\_
dupcat.h			/  Contains the dupcat() function, that concatinates 4 strings into malloc()'ed memory.
entry.c				\_
entry.h				/  Implementation of the ba_Entry struct.
entrylist.c			\_
entrylist.h			/  Functions for manipulating linked lists of ba_Entry structs
file.c				\_
file.h				/  Implementation of the ba_File struct.
filesystem.c			\_
filesystem.h			/  Wrappers for OS-dependent filesystem functions.
main.c				\_
main.h				/  Example archiver that makes use of the BoxArchive library.
Makefile			-  The makefile.
positions.h			-  positions of different data in a BOX archive.
README				-  This readme file.
TODO				-  Things to do before the next major version. Stuff at the top should be done first.
types.h				-  Macros for format-version-dependent types.
